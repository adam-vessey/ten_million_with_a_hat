<?php

/**
 * @file
 * Places page objects in a single book.
 */

/**
 * Implements hook_ten_million_with_a_hat_also_do_these_things().
 */
function hats_in_a_book_ten_million_with_a_hat_also_do_these_things() {
  global $user;
  $tuque = islandora_get_tuque_connection();
  $book = $tuque->repository->constructObject('book');
  $book->label = "Book hat";
  $book->owner = $user->name;
  $book->models = (array) 'islandora:bookCModel';
  $book->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:bookCollection');
  $tuque->repository->ingestObject($book);
  cache_set('hats_in_a_book_current_page', 1);
  return array(
    array(
      'when' => 'before_batch',
      'message' => "Ingesting all pages into the book object {$book->id}.",
    ),
    array(
      'callback' => 'hats_in_a_book_add_to_book',
      'args' => array($book->id),
      'when' => 'between_ingests',
    ),
    array(
      'when' => 'after_batch',
      'callback' => 'hats_in_a_book_after_batch_callback',
      'args' => array($book->id),
    ),
  );
}

/**
 * Adds the page to a book, if necessary.
 *
 * @param AbstractObject $object
 *   The object to add to the book if it's a page.
 * @param string $book
 *   The PID of the book to add the pages to.
 */
function hats_in_a_book_add_to_book(AbstractObject $object, $book) {
  if (in_array('islandora:pageCModel', $object->models)) {
    // Add the page to the book.
    module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
    $current_page = cache_get('hats_in_a_book_current_page');
    $current_page = $current_page->data;
    islandora_paged_content_set_relationship($object->relationships, ISLANDORA_RELS_EXT_URI, 'isPageOf', $book);
    islandora_paged_content_set_relationship($object->relationships, ISLANDORA_RELS_EXT_URI, 'isSequenceNumber', $current_page);
    islandora_paged_content_set_relationship($object->relationships, ISLANDORA_RELS_EXT_URI, 'isPageNumber', $current_page);
    islandora_paged_content_set_relationship($object->relationships, ISLANDORA_RELS_EXT_URI, 'isSection', 1);
    islandora_paged_content_set_relationship($object->relationships, FEDORA_RELS_EXT_URI, 'isMemberOf', $book);
    $message = "Set {$object->id} as page $page of book object $book.";
    $current_page++;
    cache_set('hats_in_a_book_current_page', $current_page);
    return $message;
  }
}

/**
 * After batch callback to clean the cache and re-report the ingested book.
 *
 * @param string $book
 *   The PID of the book we ingested any pages into.
 *
 * @return string
 *   A message re-reporting the PID of the book.
 */
function hats_in_a_book_after_batch_callback($book) {
  cache_clear_all('hats_in_a_book_current_page', 'cache');
  return "All page objects have been ingested into the book object $book.";
}
