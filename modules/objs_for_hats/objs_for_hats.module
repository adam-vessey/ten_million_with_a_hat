<?php

/**
 * @file
 * OBJs for hats!
 */

/**
 * Implements hook_ten_million_with_a_hat_also_do_these_things().
 */
function objs_for_hats_ten_million_with_a_hat_also_do_these_things() {
  return array(
    // We would much prefer to generate derivatives at each individual time of
    // ingest, rather than in bulk after the whole thing is done.
    array(
      'callback' => 'objs_for_hats_shut_off_derivative_generation',
      'when' => 'before_batch',
    ),
    array(
      'callback' => 'objs_for_hats_turn_on_derivative_generation_again',
      'when' => 'after_batch',
    ),
    array(
      'callback' => 'objs_for_hats_put_obj_on_hat',
      // We should try to do this long after any other OBJs may be created.
      'weight' => 50,
      'when' => 'between_ingests',
    ),
  );
}

/**
 * Shuts off derivative generation.
 */
function objs_for_hats_shut_off_derivative_generation() {
  variable_set('islandora_defer_derivatives_on_ingest', TRUE);
  return "Derivative generation has been shut off to prefer manually triggering derivative generation.";
}

/**
 * Turns it on again. I dunno why you're reading this.
 */
function objs_for_hats_turn_on_derivative_generation_again() {
  variable_set('islandora_defer_derivatives_on_ingest', FALSE);
  return "Derivative generation has been turned on again.";
}

/**
 * Attempts to put an OBJ file on the object given if none exist.
 *
 * @param AbstractObject $object
 *   The object to try to put an OBJ datastream on.
 */
function objs_for_hats_put_obj_on_hat(AbstractObject $object) {
  if (!$object['OBJ']) {
    $file = objs_for_hats_attempt_to_divine_test_obj_path($object);
    if ($file) {
      $obj_datastream = $object->constructDatastream('OBJ', 'M');
      $obj_datastream->setContentFromFile($file['uri']);
      $obj_datastream->mimetype = $file['mimetype'];
      $obj_datastream->label = $file['filename'];
      $object->ingestDatastream($obj_datastream);
    }
  }
  // Recreates islandora_do_batch_derivatives() in immediate mode.
  $results = array();
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/derivatives');
  $options = array(
    'destination_dsid' => 'OBJ',
  );
  $hooks = islandora_invoke_hook_list(ISLANDORA_DERIVATIVE_CREATION_HOOK, $object->models, array($object));
  uasort($hooks, 'drupal_sort_weight');
  $hooks = islandora_filter_derivatives($hooks, $options, $object);
  foreach ($hooks as $hook) {
    if (isset($hook['file'])) {
      require_once $hook['file'];
    }
    foreach ($hook['function'] as $function) {
      if (function_exists($function)) {
        $logs = call_user_func($function, $object, TRUE, $hook);
        foreach ($logs as $log) {
          foreach ($log['messages'] as $message) {
            $results[] = $message;
          }
        }
      }
    }
  }
  return $results;
}

/**
 * Attempts to divine the path to a content model test object using witchcraft.
 *
 * @param AbstractObject $object
 *   The object.
 *
 * @return bool|string
 *   A string as a path, or FALSE if the arcane spells have fizzled.
 */
function objs_for_hats_attempt_to_divine_test_obj_path(AbstractObject $object) {
  if (!$model_cache = cache_get('objs_for_hats_models')) {
    cache_set('objs_for_hats_models', objs_for_hats_generate_solution_pack_model_array(), 'cache', CACHE_TEMPORARY);
    $model_cache = cache_get('objs_for_hats_models');
  }
  return objs_for_hats_get_path_for_model($object, $model_cache->data);
}

/**
 * Generates an array of content models and the modules they come from.
 *
 * @return array
 *   An associative array of content models and modules they're from.
 */
function objs_for_hats_generate_solution_pack_model_array() {
  $return_array = array();

  module_load_include('inc', 'islandora', 'includes/solution_packs');
  $required_objects = islandora_solution_packs_get_required_objects();
  foreach ($required_objects as $module => $objects) {
    foreach ($objects['objects'] as $object) {
      if (in_array('fedora-system:ContentModel-3.0', $object->models)) {
        $return_array[$object->id] = $module;
      }
    }
  }

  return $return_array;
}

/**
 * Returns an appropriate path to a test file for the given object.
 *
 * @param AbstractObject $object
 *   The object to get the path for.
 * @param array $model_module_array
 *   The return result from objs_for_hats_generate_solution_pack_model_array().
 *
 * @return array
 *   An associative array containing the keys 'uri' for the file's URI,
 *   'filename' for the file's name, and 'mimetype' for the file's mimetype.
 */
function objs_for_hats_get_path_for_model(AbstractObject $object, array $model_module_array) {
  $models = array_diff($object->models, array('fedora-system:FedoraObject-3.0'));
  if (!$model = array_shift($models)) {
    return FALSE;
  }
  if ($model_cache = cache_get('objs_for_hats_models_' . $model)) {
    return $model_cache->data;
  }
  module_load_include('inc', 'islandora', 'includes/mimetype.utils');
  $extensions = islandora_get_extensions_for_datastream($object, 'OBJ');
  // XXX: Haaaaaack out that XML filetype for now instead of trying to magic up
  // the difference between valid OBJ XML and the billion other XMLs that might
  // be in a module's path.
  $extensions = array_diff($extensions, array('xml'));
  foreach ($extensions as $extension) {
    $files = file_scan_directory(drupal_get_path('module', $model_module_array[$model]), "/.*\.$extension$/");
    if (!empty($files)) {
      $file = array_shift($files);
      $mimedetect = new MimeDetect();
      $return_set = array(
        'uri' => $file->uri,
        'filename' => $file->filename,
        'mimetype' => $mimedetect->getMimetype($file->filename),
      );
      cache_set('obj_for_hats_models_' . $model, $return_set, 'cache', CACHE_TEMPORARY);
      return $return_set;
    }
  }
  return FALSE;
}
