<?php

/**
 * @file
 * OBJs for hats!
 */

/**
 * Implements hook_ten_million_with_a_hat_also_do_these_things().
 */
function objs_for_hats_ten_million_with_a_hat_also_do_these_things() {
  return array(
    array(
      'callback' => 'objs_for_hats_put_obj_on_hat',
      // We should try to do this long after any other OBJs may be created.
      'weight' => 50,
      'when' => 'between_ingests',
    ),
  );
}

/**
 * Attempts to put an OBJ file on the object given if none exist.
 *
 * @param AbstractObject $object
 *   The object to try to put an OBJ datastream on.
 */
function objs_for_hats_put_obj_on_hat(AbstractObject $object) {
  if (!$object['OBJ']) {
    $file = objs_for_hats_attempt_to_divine_test_obj_path($object);
    if ($file) {
      $obj_datastream = $object->constructDatastream('OBJ', 'M');
      $obj_datastream->setContentFromFile($file['uri']);
      $obj_datastream->mimetype = $file['mimetype'];
      $obj_datastream->label = $file['filename'];
      $object->ingestDatastream($obj_datastream);
      return "Added OBJ datastream to {$object->id} from {$file['uri']}.";
    }
  }
}

/**
 * Attempts to divine the path to a content model test object using witchcraft.
 *
 * @param AbstractObject $object
 *   The object.
 *
 * @return bool|string
 *   A string as a path, or FALSE if the arcane spells have fizzled.
 */
function objs_for_hats_attempt_to_divine_test_obj_path(AbstractObject $object) {
  if (!$model_cache = cache_get('objs_for_hats_models')) {
    cache_set('objs_for_hats_models', objs_for_hats_generate_solution_pack_model_array(), 'cache', CACHE_TEMPORARY);
    $model_cache = cache_get('objs_for_hats_models');
  }
  return ten_million_with_a_hat_get_random_array_member(objs_for_hats_get_paths_for_model($object, $model_cache->data));
}

/**
 * Generates an array of content models and the modules they come from.
 *
 * @return array
 *   An associative array of content models and modules they're from.
 */
function objs_for_hats_generate_solution_pack_model_array() {
  $return_array = array();

  module_load_include('inc', 'islandora', 'includes/solution_packs');
  $required_objects = islandora_solution_packs_get_required_objects();
  foreach ($required_objects as $module => $objects) {
    foreach ($objects['objects'] as $object) {
      if (in_array('fedora-system:ContentModel-3.0', $object->models)) {
        $return_array[$object->id] = $module;
      }
    }
  }

  return $return_array;
}

/**
 * Gets an array of paths to possible test files appropriate as an object's OBJ.
 *
 * @param AbstractObject $object
 *   The object to get the path for.
 * @param array $model_module_array
 *   The return result from objs_for_hats_generate_solution_pack_model_array().
 *
 * @return array
 *   An array containing zero or more file arrays containing the keys 'uri' for
 *   the file's URI, 'filename' for the file's name, and 'mimetype' for the
 *   file's mimetype.
 */
function objs_for_hats_get_paths_for_model(AbstractObject $object, array $model_module_array) {
  $models = array_diff($object->models, array('fedora-system:FedoraObject-3.0'));
  if (!$model = array_shift($models)) {
    return FALSE;
  }
  if ($model_cache = cache_get('objs_for_hats_models_' . $model)) {
    return $model_cache->data;
  }
  module_load_include('inc', 'islandora', 'includes/mimetype.utils');
  $extensions = islandora_get_extensions_for_datastream($object, 'OBJ');
  $base_path = drupal_get_path('module', $model_module_array[$model]);
  // Conventionally, test objects are stored in a module's tests/fixtures
  // folder; we should search there first.
  if (file_exists($base_path . "/tests/fixtures")) {
    $base_path .= "/tests/fixtures";
    // XXX: The .xml extension may be valid in some cases as an OBJ, but
    // virtually all modules will also contain unsuitable xml, and attempting
    // to divine the difference would be a fairly significant undertaking with
    // little payoff, so let's hack it out.
    $extensions = array_diff($extensions, array('xml'));
  }
  else {
    // Same thing here, except that since we're searching from the root of the
    // module, rogue .txt files also may cause trouble.
    $extensions = array_diff($extensions, array('xml', 'txt'));
  }
  $return_set = array();
  $mimedetect = new MimeDetect();
  foreach ($extensions as $extension) {
    $files = file_scan_directory($base_path, "/.*\.$extension$/");
    foreach ($files as $file) {
      $return_set[] = array(
        'uri' => $file->uri,
        'filename' => $file->filename,
        'mimetype' => $mimedetect->getMimetype($file->filename),
      );
    }
  }
  cache_set('obj_for_hats_models_' . $model, $return_set, 'cache', CACHE_TEMPORARY);
  return $return_set;
}
